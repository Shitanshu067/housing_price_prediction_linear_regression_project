# -*- coding: utf-8 -*-
"""Housing price prediction linear regression project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t0bstIAbOo8MbAC4FQqYRto5pT2aanU_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('Housing.csv')

df.head()

df.shape

df.info

df.describe()

df.isnull().sum()*100/df.shape[0]

sns.pairplot(df)
plt.show()

df.head()

# Get the dummy variables for the feature 'furnishingstatus' and store it in a new variable - 'status'
status = pd.get_dummies(df['furnishingstatus'])

status.head()

status = pd.get_dummies(df['furnishingstatus'], drop_first = True)

df = pd.concat([df, status], axis = 1)

df.head()

# Drop 'furnishingstatus' as we have created the dummies for it

df.drop(['furnishingstatus'], axis = 1, inplace = True)

df.head()

from sklearn.model_selection import train_test_split

# We specify this so that the train and test data set always have the same rows, respectively
np.random.seed(0)
df_train, df_test = train_test_split(df, train_size = 0.7, test_size = 0.3, random_state = 100)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

num_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking','price']

df_train[num_vars] = scaler.fit_transform(df_train[num_vars])

df_train.head()

df_train.describe()

y_train = df_train.pop('price')
X_train = df_train

from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression

lm = LinearRegression()
lm.fit(X_train, y_train)

lm

lm=LinearRegression().fit(x,y)

y_pred=lm.predict(x)

y_pred

import pandas as pd
import matplotlib.pyplot as plt

df.head()

df.columns

y=df['price']
x=df[['area','bedrooms','bathrooms','parking']]

y

x

from sklearn.metrics import mean_squared_error

from sklearn.metrics import r2_score
# r2_score function to evalute the cofficient of determination (R^2) of linear regression

mse=mean_squared_error(y,y_pred)
r2=r2_score(y,y_pred)

mse

r2

print(" Mean squared error : %.2f" % mse)
print("cofficient of detemination (R^2) : %.2f" % r2)

# Plot the actual vs predicted values
plt.scatter(y,y_pred)
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("Actual vs predicted values")
plt.show()



